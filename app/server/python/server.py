import asyncio
import grpc
from cli import args
from shutdown import register_signal_handler
from log import logger
from rpc import Greeter
from grpc_reflection.v1alpha import reflection
# generated by protoc
from hello_world_pb2_grpc import add_GreeterServicer_to_server
import hello_world_pb2

MAX_CONCURRENT_RPCS = 1000


class GRPCServer:
    def __init__(self, listen_addr: str, max_concurrent_rpcs: int) -> None:
        self._server = grpc.aio.server(maximum_concurrent_rpcs=max_concurrent_rpcs)
        add_GreeterServicer_to_server(Greeter(), self._server)
        SERVICE_NAMES = (
            hello_world_pb2.DESCRIPTOR.services_by_name['Greeter'].full_name,
            reflection.SERVICE_NAME,
        )
        reflection.enable_server_reflection(SERVICE_NAMES, self._server)
        self._server.add_insecure_port(listen_addr)

    async def start(self) -> None:
        logger.info("Starting GRPCServer")
        await self._server.start()

    async def stop(self) -> None:
        logger.info("Stopping GRPCServer")
        await self._server.stop(1)

    async def wait(self) -> None:
        await self._server.wait_for_termination()


async def main():
    async def shutdown(server: GRPCServer):
        logger.info("Shutting down server due to signal callback")
        await server.stop()

    logger.info("Starting main application")
    server = GRPCServer(args.addr, MAX_CONCURRENT_RPCS)

    # Register signal handlers
    register_signal_handler(asyncio.get_event_loop(), shutdown(server))
    await server.start()
    await server.wait()



if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    loop.run_until_complete(main())
